<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerGravity = 1000;

xVelocity = 0;
yVelocity = 0;
maxXVelocity = 300;
xAccel = 1500;
xDeceleration = .25; //every second the speed should be 50% of what it was


tickTime = 1 / room_speed; //amount of seconds for every tick

jumpTimer = 0;
jumpCoolDown = room_speed * 2.5;  //2.5 seconds of jump cool down
jumpVelocity = -650; //how fast a jump will send the player upwards
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Gravity, Floor
if(y &lt; room_height){ //apply gravity
    yVelocity += (playerGravity * tickTime);
}

if(y + sprite_height/2 &gt;= room_height){ //stop from falling through the bottom
    if(yVelocity &gt; 200){
        yVelocity = yVelocity * -.5; //bounce back up
    } else {
        yVelocity = 0;
    }
    y = room_height - sprite_height/2;
    jumpTimer = 0; //make it so the player can immediately jump again
}

if(keyboard_check(vk_up) &amp;&amp; jumpTimer == 0){ //if trying to jump and can
    //show_debug_message("trying to jump");
    jumpTimer = jumpCoolDown;
    yVelocity = jumpVelocity;
}

if(keyboard_check(vk_right)){
    xVelocity += xAccel * tickTime;
    if(xVelocity &gt; maxXVelocity){ //capping speed
        xVelocity = maxXVelocity;
    }
}

if(keyboard_check(vk_left)){
    xVelocity -= xAccel * tickTime;
    if(xVelocity * -1 &gt; maxXVelocity){ //capping speed
        xVelocity = -1 * maxXVelocity;
    }
}

if(jumpTimer &gt; 0){
    jumpTimer--;
}

//xVelocity -= (xVelocity * xDeceleration) * tickTime; //deceleration

//x += xVelocity * tickTime; //move horizontally
//y += yVelocity * tickTime; //move vertically
//^ now handled last
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Block Collisions
var i;
for (i = 0; i &lt; instance_number(obj_parentBlock); i += 1){ //loop through all the blocks
    block[i] = instance_find(obj_parentBlock,i);
    if( abs(y - block[i].y) &lt; block[i].height/2 + sprite_height/2){ //if vertically aligned
        //show_debug_message("horizontally aligned to block");
        if( (abs((x + xVelocity * tickTime) - block[i].x )) &lt; block[i].width/2 + sprite_width/2) { //if next tick it will collide
            xVelocity = 0;
            if(x &gt; block[i].x) // if it is to the right
                x = block[i].x + block[i].width/2 + sprite_width/2;
            if(x &lt; block[i].x) //if it is to the left
                x = block[i].x - block[i].width/2 - sprite_width/2;
        }
        continue;
    }
    if( abs(x - block[i].x) &lt; block[i].width/2 + sprite_width/2){ //if horizontally aligned
        //show_debug_message("horizontally aligned to block");
        if( ( abs((y + yVelocity * tickTime) - block[i].y )) &lt; block[i].height/2 + sprite_height/2) { //if next tick it will collide
            yVelocity = 0;
            
            
            
            if(y &gt; block[i].y) //if it is underneath
                y = block[i].y + block[i].height/2 + sprite_height/2;
            if(y &lt; block[i].y){ //if it is above
                y = block[i].y - block[i].height/2 - sprite_height/2;
                jumpTimer = 0;
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Movement
xVelocity -= (xVelocity * xDeceleration) * tickTime; //deceleration

x += xVelocity * tickTime; //move horizontally
y += yVelocity * tickTime; //move vertically

if(x + sprite_width/2 &gt; room_width){
    x = room_width - sprite_width / 2;
    xVelocity = -.5 * xVelocity;
}
    
if(x - sprite_width/2 &lt; 0){
    x = sprite_width / 2;
    xVelocity = -.5 * xVelocity;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
